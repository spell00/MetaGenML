from sklearn.discriminant_analysis import LinearDiscriminantAnalysis, QuadraticDiscriminantAnalysis
from sklearn.neighbors import KNeighborsClassifier
import xgboost as xgb
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier, BaggingClassifier
from sklearn.svm import SVC
from skopt.space import Real, Integer, Categorical

def import_models(models_done):
    hparam_names = {
        'xgb': ["n_aug", "p", "g", "max_depth", "eta", "min_child_weight",
                "max_delta_step", "gamma", "subsample", 
                # "tree_method", "device", "objective", 
                "scaler", "zeros_cutoff", "features_cutoff"],
        'lda': ["n_aug", "p", "g", "scaler", "zeros_cutoff", "features_cutoff"],
        'qda': ["n_aug", "p", "g", "scaler", "zeros_cutoff", "features_cutoff"],
        'knr': ["n_aug", "p", "g", "n_neighbors", "scaler", "zeros_cutoff", "features_cutoff"],
        # 'linreg': ["n_aug", "p", "g", "scaler"],
        'rfr': ["n_aug", "p", "g", "max_depth", 
                "max_samples", "min_samples_split", "min_samples_leaf", 
                "n_estimators", "oob_score", "scaler", "zeros_cutoff", "features_cutoff"],
        # 'gbr': ["n_aug", "p", "g", "max_depth", 
        #         "min_samples_split", "learning_rate",
        #           "n_estimators", "loss", "scaler",
        #           "zeros_cutoff", "features_cutoff"],
        'svr': ["n_aug", "p", "g", 'tol', 'kernel', 'C',
                "scaler", "zeros_cutoff", "features_cutoff"],
        # 'bagging_svr': ['tol', 'kernel', 'C', "n_aug", "p",
        #                  "g", "max_samples", "n_estimators", "oob_score", 
        #                  "scaler", "zeros_cutoff", "features_cutoff"],
        # 'bagging_linreg': ["n_aug", "p", "g", "features_cutoff", "max_samples",
        #                    "n_estimators", "oob_score", "scaler"],
        # 'xgb': ["n_aug", "p", "g", "max_depth", "eta","min_child_weight", 
        #         "max_delta_step", "gamma", "subsample", "scaler"],
    }
    spaces = {
        'xgb': [
            Integer(0, 5, 'uniform', name="n_aug"),
            Real(0, 0.1, 'uniform', name="p"),
            Real(0, 0.1, 'uniform', name="g"),
            # Real(0, 5, 'uniform', name="f"),
            Integer(1, 10, 'uniform', name="max_depth"),
            Real(1e-4, 1e-1, 'uniform', name="eta"),
            Real(0, 5, 'uniform', name="min_child_weight"),
            Real(0, 3, 'uniform', name="max_delta_step"),
            Real(0, 1, 'uniform', name="gamma"),
            Real(0, 1, 'uniform', name="subsample"),
            # Categorical(['hist'], name="tree_method"),
            # Categorical(['cuda:0'], name="device"),
            # Categorical(['binary:logistic'], name="objective"),
            Categorical(['binary', 'minmax', 'standard', 'robust'], name="scaler"),
            Real(0.01, 1, 'uniform', name="zeros_cutoff"),
            Real(0.01, 1, 'uniform', name="features_cutoff"),
        ],
        'lda': [
            Integer(0, 5, 'uniform', name="n_aug"),
            Real(0, 0.1, 'uniform', name="p"),
            Real(0, 0.1, 'uniform', name="g"),
            # Real(0, 5, 'uniform', name="f"),
            Categorical(['binary', 'minmax', 'standard', 'robust'], name="scaler"),
            Real(0.01, 1, 'uniform', name="zeros_cutoff"),
            Real(0.01, 1, 'uniform', name="features_cutoff"),
        ],
        "qda": [
            Integer(0, 5, 'uniform', name="n_aug"),
            Real(0, 0.1, 'uniform', name="p"),
            Real(0, 0.1, 'uniform', name="g"),
            # Real(0, 5, 'uniform', name="f"),
            Categorical(['binary', 'minmax', 'standard', 'robust'], name="scaler"),
            Real(0.01, 1, 'uniform', name="zeros_cutoff"),
            Real(0.01, 1, 'uniform', name="features_cutoff"),
        ],
        'knr': [
            Integer(0, 100, 'uniform', name="n_aug"),
            Real(0, 0.1, 'uniform', name="p"),
            Real(0, 0.1, 'uniform', name="g"),
            # Real(0, 5, 'uniform', name="f"),
            Integer(1, 5, 'uniform', name="n_neighbors"),
            Categorical(['binary', 'minmax', 'standard', 'robust'], name="scaler"),
            Real(0.01, 1, 'uniform', name="zeros_cutoff"),
            Real(0.01, 1, 'uniform', name="features_cutoff"),
        ],
        # 'linreg': [
        #     Integer(0, 100, 'uniform', name="n_aug"),
        #     Real(0, 0.5, 'uniform', name="p"),
        #     Real(0, 5, 'uniform', name="g"),
        #     Real(0, 5, 'uniform', name="f"),
        #     Categorical(['standard', 'robust'], name="scaler")
        # ],
        'rfr': [
            Integer(0, 5, 'uniform', name="n_aug"),
            Real(0, 0.1, 'uniform', name="p"),
            Real(0, 0.1, 'uniform', name="g"),
            # Real(0, 5, 'uniform', name="f"),
            Integer(10, 100, 'uniform', name="max_depth"),
            Real(0.1, 1, 'uniform', name="max_samples"),
            Integer(2, 10, 'uniform', name="min_samples_split"),
            Integer(1, 10, 'uniform', name="min_samples_leaf"),
            Integer(1, 100, 'uniform', name="n_estimators"),
            # Categorical(["squared_error", "absolute_error", "friedman_mse", "poisson"], name="criterion"),
            Categorical([False], name="oob_score"),
            Categorical(['binary', 'minmax', 'standard', 'robust'], name="scaler"),
            Real(0.01, 1, 'uniform', name="zeros_cutoff"),
            Real(0.01, 1, 'uniform', name="features_cutoff"),
        ],
        # 'gbr': [
        #     Integer(0, 5, 'uniform', name="n_aug"),
        #     Real(0, 0.5, 'uniform', name="p"),
        #     Real(0, 5, 'uniform', name="g"),
        #     Real(0, 5, 'uniform', name="f"),
        #     Integer(1, 100, 'uniform', name="max_depth"),
        #     Integer(2, 10, 'uniform', name="min_samples_split"),
        #     Real(1e-4, 1e-1, 'uniform', name="learning_rate"),
        #     Integer(1, 10, 'uniform', name="n_estimators"),
        #     # Categorical(["squared_error", "absolute_error", "friedman_mse", "poisson"], name="criterion"),
        #     Categorical(["log_loss"], name="loss"),
        #     Categorical(['binary', 'minmax', 'standard', 'robust'], name="scaler"),
        #     Real(0.01, 1, 'uniform', name="zeros_cutoff"),
        #     Real(0.01, 1, 'uniform', name="features_cutoff"),
        # ],
        'svr': [
            Integer(0, 1, 'uniform', name="n_aug"),
            Real(0, 0.1, 'uniform', name="p"),
            Real(0, 0.1, 'uniform', name="g"),
            # Real(0, 5, 'uniform', name="f"),
            Real(1e-4, 1, 'log-uniform', name='tol'),
            # Real(0, 1, 'uniform', name='epsilon'),
            # Integer(1, 100000, 'uniform', name='max_iter'),
            Categorical(['linear', 'rbf', 'poly'], name='kernel'),
            Real(1e-3, 100, 'uniform', name='C'),
            Categorical(['binary', 'minmax', 'standard', 'robust'], name="scaler"),
            Real(0.01, 1, 'uniform', name="zeros_cutoff"),
            Real(0.01, 1, 'uniform', name="features_cutoff"),
        ],
        # 'bagging_svr': [
        #     Real(1e-4, 1, 'log-uniform', name='tol'),
        #     # Real(0, 1, 'uniform', name='epsilon'),
        #     # Integer(1, 100000, 'uniform', name='max_iter'),
        #     Categorical(['linear', 'rbf', 'poly'], name='kernel'),
        #     Real(1e-3, 100, 'uniform', name='C'),
        #     Integer(0, 1, 'uniform', name="n_aug"),
        #     Real(0, 0.5, 'uniform', name="p"),
        #     Real(0, 5, 'uniform', name="g"),
        #     Real(0, 5, 'uniform', name="f"),
        #     # Real(0.01, 1, 'uniform', name="features_cutoff"),
        #     Real(0.1, 1, 'uniform', name="max_samples"),
        #     Integer(1, 10, 'uniform', name="n_estimators"),
        #     # Categorical([LinearRegression], name="base_estimator"),
        #     # Categorical(["squared_error", "absolute_error", "friedman_mse", "poisson"], name="criterion"),
        #     Categorical([False], name="oob_score"),
        #     Categorical(['binary', 'minmax', 'standard', 'robust'], name="scaler"),
        #     Real(0.01, 1, 'uniform', name="zeros_cutoff"),
        #     Real(0.01, 1, 'uniform', name="features_cutoff"),
        # ],
    }
    models = [
        xgb.XGBClassifier(),
        LinearDiscriminantAnalysis(),
        QuadraticDiscriminantAnalysis(),
        KNeighborsClassifier(),
        # LinearRegression(),
        RandomForestClassifier(),
        # GradientBoostingClassifier(),
        SVC(),
        # BaggingClassifier(SVC()),
        # BaggingClassifier(LinearRegression()),
        # XGBClassifier(),

    ]
    # remove the models that are done
    models = [model for model, name in zip(models, list(spaces.keys())) if name not in models_done]
    hparam_names = {name: hparam_names[name] for name in spaces.keys() if name not in models_done}
    spaces = {name: spaces[name] for name in spaces.keys() if name not in models_done}
    
    return models, hparam_names, spaces
